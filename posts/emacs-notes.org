#+BEGIN_COMMENT
.. title: Emacs 笔记
.. slug: emacs-notes
.. date: 2013-8-05 00:38:01 +0800
.. tags: emacs, notes
.. link: 
.. description: 
.. type: text
#+END_COMMENT

#+HTML: <!-- TEASER_END -->

#+TITLE: EMACS

* Display
** Horizontal Scrolling
   `auto-hscroll-mode' `hscroll-margin' `hscroll-step'
   + `C-x <' `scroll-letf'
   + `C-x >' `scroll-right'
** Follow Mode
   + `M-x follow-mode'
** Faces
   + [[Font Lock]]
   + `ps-print-buffer-with-faces' [[PostScript]]
   + [[Format Faces]]
   + [[Face Customization]]
   + [[Resources][X Resources]]
   + [[Frame Parameters]]
** Standard Faces
   `M-x list-faces-display' :: see what faces are currently defind and what they look like
   + standard faces for specifying text appearance
   `default' `bold' `italic' `bold-italic' `underline' `fixed-pitch' `variable-pitch' `shadow'
   + faces used to highlight
   `highlight' `isearch'[[Incremental Search]] `query-replace'[[Replace]] `lazy-highlight' `region' `secondary-selection'[[Secondary Selection]] `trailing-whitespace'[[useless Whitespace]] `nobreak-space' `escapse-glyph'
   + faces used to control the appearance of parts of the Emacs frame
   `mode-line' `mode-line-inactive' `mode-line-highlight' `header-line' `vertical-border' `minibuffer-prompt' `fringe'[[Fringes]] `scroll-bar'[[Scroll Bars]] `border' `cursor' `mouse' `tool-bar'[[Tool Bars]] `tooltip'[[Tooltips]] `menu'
* Hyperlinking
** Browse-URL
   + `M-x browse-url <RET> URL <RET>'
   + `M-x browse-url-at-point'
   + `M-x browse-url-at-mouse'
   + `C-h p'
   + `browse-url-browser-function'
** Goto Address mode
   + `M-x goto-address-mode' :: 将buffer中的urls显示为按钮
** FFAP  :: Finding files etc. at point
   FFAP mode replaces certain key bindings for finding files, including `C-x C-f', with commands that provide more sensitive defaults.
   `ffap-bindings' 可启动FFAP minor mode
   + `C-x C-f FILENAME <RET>' `find-file-at-point'
   + `C-x C-f' `ffap-read-only', analogous to `find-read-only'
   + `C-x C-v' ffap-alternate-file', analogous to `find-alternate-file'
   + `C-x d DIRECTORY <RET>' `dired-at-point'
   + `C-x C-d' `ffap-list-directory'
   + `C-x 4 f' `ffap-other-window'
   + `C-x 4 r' `ffap-read-only-other-window'
   + `C-x 4 d' `ffap-dired-other-window'
   + `C-x 5 f' `ffap-other-frame'
   + `C-x 5 d' `ffap-dired-other-window'
   + `S-Mouse-3' `ffap-at-mouse'
   + `C-S-Mouse-3' `ffap-menu'
* Customization
** Minor Modes
1) 每个 minor mode 有一个 mode command 启动或关闭该模式。_mode command_ 由模式名加 -mode 组成。 mode command 前加正参数总是开启，复参数关闭模式
2) 每个 minor mode 有一个 mode variable ,与 mode command 名字一样，启动时为 non `nil', 未启动时为 `nil', mode command 即通过设置 mode variable  来决定模式是否开启
3) 建议用 mode command 而不是 mode variable  来更改模式
4) buffer-local minor modes:
   + Abbrev mode
   + Auto Fill mode
   + Auto Save mode
   + Enriched mode
   + Flyspell mode 
   + Font-Lock mode
   + Linum mode 
   + Outline minor mode
   + Overwrite mode 
   + Binary Overwrite mode
   + Visual Line mode
5) global minor modes
   + Transient Mark mode
   + Line Number mode
   + Column Number mode
   + Delete Selection mode
   + Icomplete mode 
   + Menu Bar mode
   + Scroll Bar mode 
   + Tool Bar mode
** Easy Customization Interface
   `M-x customize' -> "customization buffer "
*** Changing a Variable
*** Face Customization
    `M-x list-colors-display' 显示颜色列表 #RRGGBB
    `M-x modify-face'
*** Specific Customization
 + `M-x customize-option <RET> OPTION <RET>'
 + `M-x customize-face <RET> FACE <RET>'
 + `M-x customize-group <RET> GROUP <RET>'
 + `M-x customize-aproos <RET> REGEXP <RET>'
 + `M-x customize-changed <RET> VERSION <RET>'
 + `M-x customize-saved'
 + `M-x customize-unsaved'
*** Custom Themes
 + `M-x customize-create-theme'
   
** Variables
   `C-h v' (`describe-variable')
*** Examing and Setting variables
 + `C-h v VAR <RET>' (`describe-variable')
 + `M-x set-variable <RET> VAR <RET> VALUE <RET>'
 + (setq fill-column 75)
*** Hooks
    1) hook 是一个钩子函数列表
2) normal hook 以 `-hook'结尾
3) abnormal hook 以 `-hooks' or `-functions' 结尾
4) 添加hook (add-hook 'text-mode-hook 'turn-on-auto-fill)
5) 另一个例子
#+BEGIN_SRC emacs-lisp
     (setq my-c-style
       '((c-comment-only-line-offset . 4)
         (c-cleanup-list . (scope-operator
                            empty-defun-braces
                            defun-close-semi))
         (c-offsets-alist . ((arglist-close . c-lineup-arglist)
                             (substatement-open . 0)))))

     (add-hook 'c-mode-common-hook
       '(lambda ()
          (c-add-style "my-style" my-c-style t)))
#+END_SRC
6) 一个钩子函数可能有不同的版本， `remove-hook' or `(setq HOOK-VARIABLE nil)' 能删除hook函数
*** Local Variables
 + `M-x make-local-variable <RET> VAR <RET>'
 + `M-x kill-local-variable <RET> VAR <RET>'
 + `M-x make-variable-buffer-local <RET> VAR <RET>'
 + (set-default fill-column 75) 将一个buffer-local变量设定全局值
 + (default-value 'fill-column) 获得fill-column的默认值
*** File Variables
**** Specifying File variables
 +  在文件第一行 -*- mode: MODENAME; VAR: VALUE; ... -*-
 #+BEGIN_EXAMPLE
 ;; -*- mode: lisp; fill-column: 75; comment-column: 50; -*-
 #+END_EXAMPLE
 + `add-file-local-variable-prop-line'
   `delete-file-local-variable-prop-line'
   `copy-dir-locals-to-file-locals-prop-line'
 + 在文件最后添加"local variables list"
 #+BEGIN_EXAMPLE
     /* Local Variables: */
     /* mode:c           */
     /* comment-column:0 */
     /* End:             */
 #+END_EXAMPLE
 + `add-file-local-variable'
   `delete-file-local-variable'
   `copy-dir-locals-to-file-locals'
 + 几个特殊的变量
   * `mode' 启动某个模式
   * `eval' 对某些表达式求值
   * `coding' 
   * `unibyte' 如果该值为 t ,则以二进制方式访问该文件
   :: 实际这四个变量不是真的变量，在其他环境中设置它们无任何意义
   `normal-mode'可以根据当前文件的名字和内容更改mode变量
**** Safe File Variables
*** Directory Variables
 + `.dir-locals.el' file.
 + `add-dir-local-variable'
 + `delete-dir-local-variable'
 + `copy-file-locals-to-dir-locals'
   
** Key Bindings
*** Events
#+BEGIN_SRC emacs-lisp
    this-command-keys
    this-command-keys-vector
read-key-sequence
read-key-sequence-vector
listify-key-sequence

#+END_SRC

*** Keymaps
   + keymap, global keymap
   + `self-insert-command'
*** `(elisp) Format of Keymaps'
:: what a keymap looks like.
*** create Keymaps
#+BEGIN_SRC emacs-lisp
(make-sparse-keymap &optional promt)
(make-keymap &optional promt) ;; with char-table all binds to nil
(copy-keymap keymap)
(keymap-parent keymap)
(set-keymap-parent keymap)
(make-composed-keymap maps &optional parent)
#+END_SRC

*** Prefix Keymaps
    the binding of `C-x' is the symbol `Control-X-preifx'
   + `ctl-x-map' `C-x'
   + `help-map' `C-h'
   + `esc-map' `<ESC>'
   + `ctl-x-4-map' `C-x 4'
   + `mode-specific-map' `C-c'
   `define-prefix-command'
*** active keymaps
#+BEGIN_SRC emacs-lisp
set-temporary-overlay-map
overriding-terminal-local-map
overriding-local-map
(current-active-maps &optional olp position)
(key-binding key &optional accept-defaults no-remap position)
;; `(elisp) Controlling Active Maps'
(current-global-map)
(current-local-map)
(current-minor-mode-maps)
(use-global-map keymap)
(use-local-map keymap)
global-map
minor-mode-map-alist
minor-mode-overriding-map-alist

;; TODO
special-event-map
#+END_SRC
*** search keymaps
伪码
#+BEGIN_SRC emacs-lisp
  (or (cond
       (overriding-terminal-local-map
        (FIND-IN overriding-terminal-local-map))
       (overriding-local-map
        (FIND-IN overriding-local-map))
       ((or (FIND-IN (get-char-property (point) 'keymap))
            (FIND-IN TEMP-MAP)
            (FIND-IN-ANY emulation-mode-map-alists)
            (FIND-IN-ANY minor-mode-overriding-map-alist)
            (FIND-IN-ANY minor-mode-map-alist)
            (if (get-text-property (point) 'local-map)
                (FIND-IN (get-char-property (point) 'local-map))
              (FIND-IN (current-local-map))))))
      (FIND-IN (current-global-map)))
  
#+END_SRC

*** Local Keymaps
*** Minibuffer Keymaps
   + `minibuffer-local-map':: for ordinary input (no completion)
   + `minibuffer-local-ns-map' :: similar,except that <SPC> exits like <RET>
   + `minibuffer-local-completion-map' :: for permissive completion
   + `minibuffer-local-must-match-map' :: for strict completion and for cautious completion
   + `minibuffer-local-filename-completion-map'
   + `minibuffer-local-must-match-filename-map'
*** Rebinding
   + `M-x global-set-key <RET> KEY CMD <RET>'
   + `M-x local-set-key <RET> KEY CMD <RET>'
   + `M-x global-unset-key <RET> KEY CMD <RET>'
   + `M-x local-unset-key <RET> KEY CMD <RET>'
   + substitute-key-definition
   + suppress-keymap 

*** Init Rebinding
#+BEGIN_SRC emacs-lisp
;; the use of `kbd' macro
(global-set-key (kbd "C-z") 'shell)
(global-set-key (kbd "C-c y") 'clipboard-yank)
(global-set-key (kbd "C-M-q") 'query-replace)
(global-set-key (kbd "C-<f5>") 'linum-mode)
(global-set-key (kbd "C-<right>") 'forward-sentence)
(global-set-key (kbd "<mouse-2>") 'mouse-save-then-kill)
(global-set-key (kbd "C-<down-mouse-3>") 'mouse-yank-at-click)
;;use lisp string or vector to secify the key sequence
(global-set-key "\C-x\M-l" 'make-symbolic-link)
(global-set-key "\C-x\t" 'indent-rigidly)
(global-set-key [?\C-=] 'make-symbolic-link)
(global-set-key [?\M-\C-=] 'make-symbolic-link)
(global-set-key [?\H-a] 'make-symbolic-link)
(global-set-key [f7] 'make-symbolic-link)
(global-set-key [C-mouse-1] 'make-symbolic-link)
(global-set-key [?\C-z ?\M-l] 'make-symbolic-link)

(add-hook 'texinfo-mode-hook
               '(lambda ()
                  (define-key texinfo-mode-map "\C-cp" 'backward-paragraph)
                  (define-key texinfo-mode-map "\C-cn" 'forward-paragraph)))
#+END_SRC
    
*** Modifier keys
*** Rebinding Function Keys
    功能键拥有自己的lisp name 详见手册
    举例：`left', `right', `up', `down', `f1', `home', `kp-add', `kp-0' 
    
*** Named ASCII Control Characters
    <TAB>与 `C-i'
*** Rebinding Mouse Buttons
*** Disabling Commands
#+BEGIN_SRC emacs-lisp
(put 'delete-region 'disabled t)
(put 'delete-region 'disabled
         "it's better to use `kill-region' instead.'n")
;;`M-x enable-command'
;;`M-x disable-command'
#+END_SRC
** Syntax
   Syntax table
** Init File
*** Init Syntax
    + `setq'
*** Init Examle
#+BEGIN_SRC lisp -n
(add-to-list 'load-path "/path/to/lisp/libraries")
(setq c-tab-always-indent nil)
(setq-default case-fold-search nil)
(setq user-mail-address "eude.xj@gmail.com")
(set-default major-mode 'text-mode)
(set-language-environment "Latin-1")
(line-number-mode 0)
(add-hook 'text-mode-hook 
  '(lambda () (auto-fill-mode 1)))
(add-hook 'text-mode-hook 'turn-on-auto-fill)
;; `foo.elc' or `foo.el'
(load "foo")
(autoload 'myfunction' "mypackage" "Do what I say." t)
(global-set-key "\C-xl" 'make-symbolic-link)
(define-key global-map "\C-xl" 'make-symbolic-link)
(substitute-key-definition 'next-line 'forward-line global-map)
(global-unset-key "\C-x\C-v")
(modify-syntax-entry ?\$ "." text-mode-syntax-table)
(put 'narrow-to-region 'disabled nil)
(if (fboundp 'blink-cursor-mode)
    (blink-cursor-mode 0))
(if (boundp 'coding-category-utf-8)
    (set-coding-priority '(coding-catergory-utf-8)))
(condition case ()
    (set-face-background 'region "grey75")
  (error nil))
#+END_SRC
*** Terminal Init
*** Find init
*** Init Non-ASCII
* Emacs 中的查找[fn:1]<2013-08-31 Sat 22:55>
** 最基本的东西
   *C-s* 开始正向查找
   *C-r* 开始方向查找
   这两个命令进入了查找模式，在 Emacs 中的术语叫做 Incremental Search ， 也就是在你输入要 查找的字符的时候，同时高亮显示找到的部分。
   下面的操作都是先按 *C-s* 或者 *C-r* 后， 进入 Incremental Search Mode 之后的操作。
- *C-r* , *C-s* ， 分别是向前查找和向后查找当前输入的内容。
  如果当前内容是空的，也就是说你连续两次输入 *C-s* ，那么就是 “查找下一个 (Find next)”的 操作。第一次是C-s 把你带入了 Incremental Search Mode ， 第二次的 *C-s* 表示查找上一次查 过的东西。 *C-r* 类似，只不过方向相反。
- *C-w* 查找光标除所在的单词
  例如， 你可以输入 *C-r* 然后马上输入 *C-w* ， 光标所在位置的单词就自动变成了要查找的内容。
  多次输入 *C-w* 后面的单词就会一个一个 的变成了查找内容一部分。
  *C-w* 还可以和上面介绍的 *C-s* *C-r* 配合使用。*C-s* 进入 Incremental Search Mode. 然后输入 void f 然后光标会停留在一个 void f 的单词上，也许是 void far ，然后用 *C-s* 或者 *C-r* 找 到某个 void f 的地方，然后 *C-w* 就可以把 f 后面的单词补全了。
- *C-y* 把光标所在位置到行尾的部分作为查找内容
  和 *C-w* 类似，只不过输入的不是一个单词， 而是整整一行。
- *M-y* 把 kill ring 中的东西输入为当前要查找的内容
- *M-c* 切换大小写敏感。
- *M-r* 切换是普通查找还是正则表达式查找。
- *M-e* 编辑要查找的内容
  Incremental Search 会随着用户的输入不断的改变光标的位置，有的时候很讨厌，那么就可以 *M-e* 编辑要查找的内容，然后按 Enter 回到 Incremetal Search 。
- *M-n* *M-p* 浏览查找历史纪录
  可以查找以前 查找过的内容。
- *C-q* *C-j* 查找多行文字。
  如果你要的查找的内容是多行文字，也就是说，查找内容中含有换行字符 *C-j* 但是， Enter 键又 作为结束查找的操作，一按 Enter 就退出了查找模式了。那么 *C-q* *C-j* 可以解决这个问题。 可 以查看 如何输入特殊的控制字符 。
     
** 用 Nonincremental Search 查找
   如果不习惯 Incremetal Search 的方式，那么可以 *C-s* <RET> ，也就是按了 *C-s* 之后，马上按 一个回车，就用 Nonincremental Search 的方式查找，这种查找方式和普通的编辑器几乎一样。
   使用 moccur 在所有打开的文件内查找
   本来 M-x occur 可以在一个 buffer 的查找某一个正则表达式。 moccur 提供更加强大 的功能。安装了 moccur 之后 ，如果进入 incremetal 查找功能，除了上面介绍的一些 功能，有多了两个新的功能。下面的操作都是先按 *C-s* 或者 *C-r* 后 进入 Incremental Search Mode 之后的操作。
   *M-o*, 小写的 o , 列出来当前 buffer 内的所有查找内容
   *M-O*, 大写的 O , 列出来所有打开的 buffer 中出现的查找内容。
** 在多个文件中查找
+ find-dired
  
运行外部命令 find , 产生文件列表，然后进入 dired 模式。
+ find-grep-dired
  
运行外部命令 find，用 grep 过滤文件， ls 产生目录列表，然后进入 dired 模式，这样 列出所有包含某些字符的文件列表。可以使用 dired-do-query-replace-regexp 在文件列 表中查找并替换。可以递归所有子目录。可以用各种条件过滤文件，详细可以查看 find 命 令的帮助。
grep

+ 在当前目录中查找指定的 regexp 。
grep-find

运行 find , grep ，然后产生类似于 compile 的结果，可以查看哪些文件在什么地方包含 了匹配了指定的 regexp 。用 *C-x* ` 浏览结果。可以递归所有子目录。，详细可以查看 find 命令的帮助。
dired-do-query-replace-regexp

在任何 dired 模式下，对于所有带有标记的文件进行查找替换。
** 替换
   
   在 transient mode 下，如果 region 是激活状态下，那么就调用 query-replace-selection , 这个函数和 query-replace 几乎完全一样，不同的是， query-replace-selection 用当前选择的 region 作为被替换的部分，而不是等用户输入。
#+begin_src emacs-lisp
(defun query-replace-selection (to-string &optional delimited start end)
  "query reqlace the current selection in transient mark mode."
  (interactive (list
                (read-from-minibuffer (format "Query replace %s with: "
                                              (buffer-substring (point) (mark)))
                                      nil nil nil
                                      query-replace-to-history-variable
                                      (buffer-substring (point) (mark))
                                      t)
                nil nil nil
                ))
  (perform-replace (buffer-substring (point) (mark)) to-string t nil delimited nil nil start end))
(wcy-define-2bind-transient-mode
 wcy-query-replace-or-query-replace-selection
 'query-replace-selection
 'query-replace)
(global-set-key (kbd "M-%") 'wcy-query-replace-or-query-replace-selection)
#+end_src 
   
   wcy-define-2bind-transient-mode 的定义参见 其他编辑技巧 中的 *C-w* 部分。
   
#+begin_src emacs-lisp :tangle yes
;; 在 C-s 进入 incremental search 的时候， 按 M-i ， 替换当前查找内容
(define-key isearch-mode-map (kbd "M-i") 'isearch-query-replace-current)
(defun isearch-query-replace-current ()
  "replace current searching string."
  (interactive)
  (let ((case-fold-search isearch-case-fold-search)
        (from-string isearch-string))
    (if (not isearch-success)
        (message "search string not found")
      (progn
       (isearch-exit)
       (goto-char (min (point) isearch-other-end)))
      ;;(isearch-abort)
      (perform-replace
       from-string
       (read-from-minibuffer (format "Query replace %s with: "
                                     from-string)
                             from-string nil nil
                             query-replace-to-history-variable
                             from-string
                             t)
       t ; query flag
       isearch-regexp

       nil))))

;; 进入 incremental search mode 之后，有些命令可以根据光标所在位置补全要查找内容，
;; 例如 C-w 可以补全一个词。但是如果按多了 C-w 就不能回退了，而且不能精确定位，
;; 下面的键绑定重新定义了一些常用的光标移动命令，根据光标移动，自动补齐查找内容，
;; 例如 C-f 自动补齐光标处的一个字符。
(define-key isearch-mode-map (kbd "C-e") 'isearch-move-point)
(define-key isearch-mode-map (kbd "C-a") 'isearch-move-point)
(define-key isearch-mode-map (kbd "M-e") 'isearch-move-point)
(define-key isearch-mode-map (kbd "M-a") 'isearch-move-point)
(define-key isearch-mode-map (kbd "C-M-e") 'isearch-move-point)
(define-key isearch-mode-map (kbd "C-M-a") 'isearch-move-point)
(define-key isearch-mode-map (kbd "C-f") 'isearch-move-point)
(define-key isearch-mode-map (kbd "C-b") 'isearch-move-point)
(define-key isearch-mode-map (kbd "M-f") 'isearch-move-point)
(define-key isearch-mode-map (kbd "M-b") 'isearch-move-point)
(define-key isearch-mode-map (kbd "C-M-f") 'isearch-move-point)
(define-key isearch-mode-map (kbd "C-M-b") 'isearch-move-point)
(defun isearch-move-point ()
  (interactive)
  (when isearch-success
    (save-excursion
      (let ((overriding-terminal-local-map nil)
            (old-point (or isearch-other-end (point))))
        (call-interactively (key-binding (this-command-keys)))
        (setq isearch-string (buffer-substring-no-properties  old-point
                                                              (point))
              isearch-message
              (mapconcat 'isearch-text-char-description
                         isearch-string "")
              ;; Don't move cursor in reverse search.
              isearch-forward (cond
                               ((< old-point (point)) t)
                               ((> old-point (point)) nil)
                               ((= old-point (point)) isearch-forward))
              )))
    (isearch-search-and-update)))

#+end_src
+ query-replay 中可以用在 _replacement_ 中用 *"\&'"* 替代完全匹配的字符串
** Emacs 的其他编辑技巧
   
*** 数字增减和循环改变文字
#+begin_src emacs-lisp :tangle yes
;; 下面的几个函数可以实现自动增加数字，和循环改变文本的功能。定义方法是
;; 1. 一个 (regexp . (lambda () ....) 的方式。 下面的第一个定义就提供了自动增加
;; 和减少数字的功能。
;; 2. 一个含有字符串的 list ， 那么就会在这些字符串中循环选择。
;; M-x wcy-rotate-text 可以接受 C-u 的参数，负数表示减少数字或者反向循环。
;; 参数的大小可以指定增加或者减少多少，或者循环的步长。

(defvar wcy-rotate-text-definations
  '(("-?[0-9]+" . (lambda ()
                    (format "%d" (+ rotate-arg (string-to-number (match-string 0))))))
    ("zero" "one" "two" "three" "four" "five" "six" "seven" "eight" "nine")
    ("Sunday"  "Monday"   "Tuesday"   "Wednesday"   "Thursday"   "Friday"
     "Saturday")
    )
  "
a list of ROT text defination. each element is a defination.
element can be a list of string.
element can be a cons. (REGEXP . func)
if REGEXP matched, func is called with no args, return value is the next value.
")

(defun wcy-rotate-text-aux ()
  (catch 'break
    (mapc
     #'(lambda (def)
         (let ((regexp (if (functionp (cdr def))
                           (car def)
                         (mapconcat 'regexp-quote def "\\|")))
               (func (if (functionp (cdr def))
                         (cdr def)
                       #'(lambda ()
                           (let* ((l (length def))
                                  (r (length (member (match-string 0) def)))
                                  (i (% (+ rotate-arg (- l r)) l)))
                             (format "%s" (nth i def)))))))
           (if (re-search-forward regexp (line-end-position) t nil)
               (throw 'break (funcall func)))))
     wcy-rotate-text-definations)
    nil))
(defun wcy-rotate-text(rotate-arg)
  (interactive "p")
  (let ((x (wcy-rotate-text-aux)))
    (when x
      (replace-match x)
      (goto-char (match-beginning 0)))))
#+end_src
*** 智能标记
#+begin_src emacs-lisp :tangle yes
;;这个功能绑定在 C-3 上。这个功能就是根据光标的所在位置，智能的选择一块区域，也就
;;是设置成为当前的 point 和 mark。这样就可以方便的拷贝或者剪切，或者交换他们的位
;;置。

;;如果当前光标在一个单词上，那么区域就是这个单词的开始和结尾分别。
;;如果当前光标在一个连字符上，那么就选择包含连字符的一个标识符。

;;这个两个的是有区别的，而且根据不同的 mode 的语法定义，连字符和单词的定义也不一样。
;;例如 C mode 下， abc_def_xxx , 如果光标停在 abc 上，那么就会选择 abc 这个单词。 如果
;;停在下划线上，那么就会选择 abc_def_xxx 。

;;如果当前光标在一个双引号,单引号，一个花括号，方括号，圆括号，小于号，或者大于号，
;;等等，那么就会选择他们对应的另一个括号之间的区域。 引号中的 escape 字符也是可以
;;自动识别的。嵌套关系也是可以识别的。这一点可以和 VIM 中的 % 的功能类比。

(defun wcy-mark-some-thing-at-point()
  (interactive)
  (let* ((from (point))
         (a (mouse-start-end from from 1))
         (start (car a))
         (end (cadr a))
         (goto-point (if (= from start )
                            end
                       start)))
    (if (eq last-command 'wcy-mark-some-thing-at-point)
        (progn
          ;; exchange mark and point
          (goto-char (mark-marker))
          (set-marker (mark-marker) from))
      (push-mark (if (= goto-point start) end start) nil t)
      (when (and (interactive-p) (null transient-mark-mode))
        (goto-char (mark-marker))
        (sit-for 0 500 nil))
      (goto-char goto-point))))
(define-key global-map (kbd "C-3") 'wcy-mark-some-thing-at-point)
(define-key global-map (kbd "M-C-SPC") 'wcy-mark-some-thing-at-point)
#+end_src
*** align-regexp
    
    M-x align-regexp 可以方便的对齐一些文字。 例如
    
    Fred (123) 456-7890
    Alice (123) 456-7890
    Mary-Anne (123) 456-7890
    Joe (123) 456-7890
    
    选择这段文字之后， M-x align-regexp ，然后根据提示输入， ``('' 这样就可以得到下 面的结果:
    
    Fred      (123) 456-7890
    Alice     (123) 456-7890
    Mary-Anne (123) 456-7890
    Joe       (123) 456-7890
    
*** *C-w* 的绑定
    
    我把 *C-w* 绑定 backward-kill-word， 这样就和 bash 的 input-line 是一致的了。我试 了试，还挺好用。但是原来的 *C-w* 是和 kill-region 绑定的。改变习惯还是很难的。以前 我不喜欢 transient-mark-mode ，但是现在发现她可以派上用场了。可以在激活选择区域 的时候，*C-w* 和 kill-region 绑定，否则和 backward-kill-word 绑定，感觉不错。
#+begin_src emacs-lisp :tangle yes
(defmacro wcy-define-2bind-transient-mode (funname cmd-mark-active
                                                   cmd-mark-no-active)
  `(defun ,funname ()
     (interactive)
     (if mark-active
         (call-interactively ,cmd-mark-active)
       (call-interactively ,cmd-mark-no-active))))
;; 和 bash 中的类似的快键，不用再按 backspace 了。
(global-set-key "\C-w"     'wcy-backward-kill-word-or-kill-region)
(wcy-define-2bind-transient-mode
 wcy-backward-kill-word-or-kill-region
 'kill-region
 'backward-kill-word)
#+end_src
    我定义了一个 macro ， 可以方便的定义这种双重绑定，也就是，在 mark-active 时运行 一个函数，否则运行另一个函数。
    
* MISC
** Major Modes
*** 有三种类型 text-mode, prog-mode, special-mode
基本hook `text-mode-hook' `prog-mode-hook'
hook 一般可用于启动 minor mode
* 显示图像

#+begin_src emacs-lisp :results output 
(image-type-available-p 'gif)

(image-type-available-p 'png)

(image-type-available-p 'jpeg)

(image-type-available-p 'tiff)

(image-type-available-p 'xbm)

(image-type-available-p 'xpm)
#+end_src

#+RESULTS:
: t

* Emacs
** smartparens
#+BEGIN_SRC emacs-lisp

(defun sp--populate-keymap (bindings)
  "Populates the `sp-keymap' from the BINDINGS alist."
  (--each bindings
    (define-key sp-keymap (read-kbd-macro (car it)) (cdr it))))
  
(setq sp-override-key-bindings 
        '(
          ("C-M-f" . sp-forward-sexp)
          ("C-M-b" . sp-backward-sexp)
          ("C-M-d" . sp-down-sexp)
          ("C-M-a" . sp-backward-down-sexp)
          ("C-S-d" . sp-beginning-of-sexp)
          ("C-S-a" . sp-end-of-sexp)
          ("C-M-e" . sp-up-sexp)
          ("C-M-u" . sp-backward-up-sexp)
          ("C-M-n" . sp-next-sexp)
          ("C-M-p" . sp-previous-sexp)
          ("C-M-k" . sp-kill-sexp)
          ("C-M-w" . sp-copy-sexp)
          ("M-<delete>" . sp-unwrap-sexp)
          ("M-<backspace>" . sp-backward-unwrap-sexp)
          ("C-<right>" . sp-forward-slurp-sexp)
          ("C-<left>" . sp-forward-barf-sexp)
          ("C-M-<left>" . sp-backward-slurp-sexp)
          ("C-M-<right>" . sp-backward-barf-sexp)
          ("M-D" . sp-splice-sexp)
          ("C-M-<delete>" . sp-splice-sexp-killing-forward)
          ("C-M-<backspace>" . sp-splice-sexp-killing-backward)
          ("C-S-<backspace>" . sp-splice-sexp-killing-around)
          ("C-]" . sp-select-next-thing-exchange)
          ("C-M-]" . sp-select-next-thing)
          ("M-F" . sp-forward-symbol)
          ("M-B" . sp-backward-symbol)
          ))
#+END_SRC

** misc
#+BEGIN_SRC emacs-lisp :tangle yes

#+END_SRC

** face
** key bindings
#+begin_src emacs-lisp 
  (local-set-key (kbd "C-c '") 'org-edit-special)
  (define-key (current-local-map) (kbd "C-c '") 'org-edit-special)
  (lookup-key (current-local-map) (kbd "C-c '"))  
  (substitute-command-keys "\\{lisp-interaction-mode-map}")
  (key-binding "C-c '")
  (local-key-binding "C-c '")
  (global-key-binding "C-c '")
  (minor-mode-key-binding "C-c '")
  ;; show current mode maps
  (mapcar (lambda(x)(car (rassq x minor-mode-map-alist)))(current-minor-mode-maps))
#+End_src
#+BEGIN_SRC emacs-lisp
(defun local-set-minor-mode-key (mode key def)
  "Overrides a minor mode keybinding for the local
   buffer, by creating or altering keymaps stored in buffer-local
   `minor-mode-overriding-map-alist'."
  (make-local-variable 'minor-mode-overriding-map-alist)
  (let* ((oldmap (cdr (assoc mode minor-mode-map-alist)))
         (newmap (or (cdr (assoc mode minor-mode-overriding-map-alist))
                     (let ((map (make-sparse-keymap)))
                       (set-keymap-parent map oldmap)
                       (push `(,mode . ,map) minor-mode-overriding-map-alist) 
                       map))))
    (define-key newmap key def)))

#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar hs-minor-mode-map
  (let ((map (make-sparse-keymap)))
    ;; These bindings roughly imitate those used by Outline mode.
    (define-key map "\C-c@\C-h"	      'hs-hide-block)
    (define-key map "\C-c@\C-s"	      'hs-show-block)
    (define-key map "\C-c@\C-\M-h"    'hs-hide-all)
    (define-key map "\C-c@\C-\M-s"    'hs-show-all)
    (define-key map "\C-c@\C-l"	      'hs-hide-level)
    (define-key map "\C-c@\C-c"	      'hs-toggle-hiding)
    (define-key map [(shift mouse-2)] 'hs-mouse-toggle-hiding)
    map)
  "Keymap for hideshow minor mode.")

#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq hs-minor-mode-prefix "\C-c@")
  (setq hs-minor-mode-prefix-map
        (let ((map (make-sparse-keymap)))
          ;; These bindings roughly imitate those used by Outline mode.
          ;; (define-key map "\C-h"            'hs-hide-block)
          (define-key map "\C-s"            'hs-show-block)
          (define-key map "\C-\M-h"    'hs-hide-all)
          (define-key map "\C-\M-s"    'hs-show-all)
          (define-key map "\C-l"            'hs-hide-level)
          (define-key map "\C-c"            'hs-toggle-hiding)
          (define-key map [(shift mouse-2)] 'hs-mouse-toggle-hiding)
          map))
  
#+END_SRC
** process
#+begin_src emacs-lisp
python-shell-prompt-pdb-regexp
python-shell-prompt-regexp

#+end_src
** refs
[[https://github.com/magnars/.emacs.d][emacs rocks @github]]
* Footnotes
  
[fn:1] [[http://emacser.com/ann77/Emacs/EmacsSearch.html][emacs 中的查找]]

