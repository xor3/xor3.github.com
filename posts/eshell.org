#+BEGIN_COMMENT
.. title: eshell
.. slug: eshell
.. date: 2014-10-05 00:33:07 +0800
.. tags: emacs, eshell
.. link: 
.. description: 
.. type: text
#+END_COMMENT

#+HTML: <!-- TEASER_END -->

* Subshells
You can use $() to in-line elisp calls and use their output as arguments, in much the same way as you would in bash. The only caveat here is you cannot use the backquote (backtick) to spawn a subshell, but that syntax was never universally supported anyway. It’s also possible (though I would not recommend it, for there are cases where it does not work) to use a standard elisp form like this: (form ...) — so the same as the subshell syntax I explained before, but without the $.
* 一些很有用的命令

Eshell comes with a selection of helper functions that make your day-to-day life just . That, combined with the power to invoke almost any elisp function, means you have incredible flexibility and control over your shell. Some of the commands I’ve listed in the table below were written for Eshell specifically, and the rest are elisp commands I find useful.

I’ve compiled a table of elisp functions (some are made for Eshell; others are not.)

#+BEGIN_EXAMPLE
Command 	Description
listify ARGS 	Parses an argument string into elisp list notation and prints it to the screen. It’s clever enough to handle both MS-DOS/Windows and POSIX-style argument syntax.
addpath PATH 	Adds the argument, which must be a path, to the $PATH environment variable. If no argument is specified the existing paths are pretty-printed to the screen.
unset ENV-VAR 	Unsets an existing environment variable
find-file FILE 	Finds the file FILE and opens it in Emacs. This function is TRAMP aware and will therefore work remotely.
dired DIRECTORY 	Opens a dired buffer in DIRECTORY.
calc-eval EXPR 	Runs EXPR through the Emacs calculator.
upcase STR/downcase STR 	Converts STR to upper- or lowercase.
vc-dir DIRECTORY 	Reports the status of a version controlled directory (equivalent to the status command in most VCS)
ediff-files FILE1 FILE2 	Diffs FILE1 and FILE2 using ediff, Emacs’ diff engine.
#+END_EXAMPLE

* 内置命令
: cat, cp, ls, cd, export, dirs, du, echo, env, kill, ln, mkdir, mv, alias, popd, pushd, pwd, rm, rmdir, time, umask.
* 被拦截的命令
: agrep, diff, egrep, fgrep, glimpse, grep, info, jobs, locate, man, occur, su, sudo, whoami.
* alias
-- variable `eshell-aliases-file'

#+BEGIN_SRC shell
alias ff 'find-file $*'
alias d 'dired $1'
#+END_SRC

* visual Commands
-- variable `eshell-visual-commands'

* 历史命令

Like bash and other shells, Eshell has support for history modification and interaction. It’s probably easier to refer you to the bash info manual for detailed information on how the history interaction works. I’ve included a small table below that describes most of the history syntax Eshell supports.
Syntax 	Description
#+BEGIN_EXAMPLE
!! 	Repeats the last command
!ls 	Repeats the last command beginning with ls
!?ls 	Repeats the last command containing ls
!ls:n 	Extract the nth argument from the last command beginning with ls
!ls 	Using pcomplete, show completion results matches ls
^old^new 	Quick substitution. Using the last command, replaceold with new and run it again. Appears to be buggy.
$_ 	Returns the last parameter in the last executed command.

#+END_EXAMPLE

Eshell also has some support for bash history modifiers (like *!!:s/old/new/* ) and the bash reference on history interaction would be a good place to brush up on that.
[[http://www.gnu.org/software/bash/manual/bash.html#History-Interaction][bash history interaction]]
* 一些有用的键绑定

Eshell comes equipped with a couple of quality-of-life improvements that make interacting with Emacs and Eshell a lot easier.
Keybind 	Description
C-c M-b 	Inserts the printed buffer name at point
C-c M-i 	Inserts the printed process name at point
C-c M-v 	Inserts an environment variable name at point
C-c M-d 	Toggles between direct input and delayed input (send on RET).

Useful for some programs that don’t work correctly with buffered input.


Keybind 	Description
M-r / M-s 	Search backwards or forwards for a command by regexp
M-p / M-n 	Goes backwards or forwards in the command history list
C-p / C-n 	Jump to the previous or next command position in Eshell
C-c M-r / C-c M-s 	Jumps to the previous or next command that shares the command currently used as input. So it jumps to other instances of the command foo if that is the current input.

Unfortunately, the new-and-improved comint-history-isearch-backward-regexp (bound to M-r in comint) doesn’t work in Eshell because it not inherit from comint (and therefore misses out on upgrades.).

* Argument Predicates & modifier
 变量 eshell-modifier-alist eshell-predicate-alist

#+BEGIN_SRC shell
$ echo *(:U)
("BAR" "BIN/" "DEV/" "ETC/" "FOO" "HOME/" "LIB/" "TMP/" "USR/" "VAR/")
#+END_SRC

Another example, but this time I filter directories using a predicate:

#+BEGIN_SRC shell
 $ echo *(^/)
("bar" "foo")
 $ echo **/*.c
#+END_SRC
The circumflex, ^, in this case, like in regular expressions, is negation. The / means “directories” only.

But I don’t have to use globs to apply modifiers or predicates to lists:

#+BEGIN_SRC shell	
$ echo ("foo" "bar" "baz" "foo")(:gs/foo/blarg/)
("blarg" "bar" "baz" "blarg")
#+END_SRC 

This time I replaced all occurrences of foo with blarg. Observe that the syntax is identical, except instead of using globs to get a list of files, I used a list of my own choosing.

** Adding New Modifiers and Predicates

参考变量 ( eshell-predicate-alist ) ( eshell-modifier-alist ):

#+BEGIN_SRC emacs-lisp
(add-to-list 'eshell-modifier-alist '(?X . '(lambda (lst) (mapcar 'rot13 lst))))
#+END_SRC

Here I’ve bound X to rot13, the substitution cipher:

#+BEGIN_SRC shell
 $ echo ("foo" "bar" "baz")(:X)
("sbb" "one" "onm")

#+END_SRC

* SMART SHELL

#+BEGIN_SRC emacs-lisp 
(require 'eshell)
(require 'em-smart)
(setq eshell-where-to-jump 'begin)
(setq eshell-review-quick-commands nil)
(setq eshell-smart-space-goes-to-end t)
#+END_SRC
* Redirection
eshell 支持 输出重定向(>, >>, >>>)，不支持输入重定向（可用 管道 )
#+BEGIN_SRC shell
 $ cat mylog.log >> #<buffer *scratch*>

# C-c M-b eshell-insert-buffer-name

# You can also output straight to an elisp symbol (but be careful you don’t fry the wrong settings):

$ echo foo bar baz > #'myvar
 $ echo $(cadr myvar)
bar
#+END_SRC 
** 重定向到伪设备

Eshell reimplements the following pseudo-devices:
Device 	Description
#+BEGIN_EXAMPLE
/dev/eshell 	Prints the output interactively to Eshell.
/dev/null 	Sends the output to the NULL device.
/dev/clip 	Sends the output to the clipboard.
/dev/kill 	Sends the output to the kill ring.
#+END_EXAMPLE

The usual redirection rules like overwrite (>) and append (>>) apply here.
** To custom virtual targets

参看变量 *eshell-virtual-targets*
* Startup Scripts

Like most shells, Eshell supports both login and profile/rc shell scripts. The full filepaths for both are stored in the variables eshell-login-script and eshell-rc-script, but by default the files login and profile are stored in ~/.eshell/.

It bears mention that the comment syntax is #.
* EshellForLoop
#+BEGIN_SRC emacs-lisp
  for i in *.pm { rm $i; cvs remove $i }
  for f in *.xpm {convert $f (file-name-sans-extension $f)}
  for f in *.xpm(:r) {convert $f.xpm $f.png} #the (:r) removes the extension
  
  echo test > original.txt
  for i in (let (lst) (dotimes (i 1000) (setq lst (append lst (list i)))) lst) {cp original.txt $i.txt}
  for i in (number-sequence 1 1000) {cp original.txt $i.txt}
  
  
  for f in web1 web2 { scp info.php $f:/var/www/html/oscmax/catalog }
# 注意两个花括号间要用空格
  for f in {ls -1d *} {echo $f; svn up $f}
  for f in {find . -name '*.java'} {mv $f (replace-regexp-in-string "\\.java$" ".scala" f)}
  # Those parens may also be curly braces. Paren for lisp, curly for subshell.
  # See how $f is used in curly brace but f is used in parens
  for f in db1 db2 {mysqldump -d -uuser -ppwd (concat "prefix_" f "_suffix") >(concat "/tmp/backup_" f ".sql")}
  
#+END_SRC

* 参考
+ http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/ [fn:1]

* Footnotes

[fn:1] http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/

